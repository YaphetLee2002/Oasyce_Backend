// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package oasyce

import (
	"Oasyce-backend/api/kitex/kitex_gen/common"
	"Oasyce-backend/api/kitex/kitex_gen/user"
	"context"
	"fmt"
)

type UserService interface {
	GetUser(ctx context.Context, req *user.GetUserRequest) (r *user.GetUserResponse, err error)
}

type UserServiceGetUserArgs struct {
	Req *user.GetUserRequest `thrift:"req,1" frugal:"1,default,user.GetUserRequest" json:"req"`
}

func NewUserServiceGetUserArgs() *UserServiceGetUserArgs {
	return &UserServiceGetUserArgs{}
}

func (p *UserServiceGetUserArgs) InitDefault() {
}

var UserServiceGetUserArgs_Req_DEFAULT *user.GetUserRequest

func (p *UserServiceGetUserArgs) GetReq() (v *user.GetUserRequest) {
	if !p.IsSetReq() {
		return UserServiceGetUserArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserServiceGetUserArgs) SetReq(val *user.GetUserRequest) {
	p.Req = val
}

func (p *UserServiceGetUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserServiceGetUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceGetUserArgs(%+v)", *p)
}

var fieldIDToName_UserServiceGetUserArgs = map[int16]string{
	1: "req",
}

type UserServiceGetUserResult struct {
	Success *user.GetUserResponse `thrift:"success,0,optional" frugal:"0,optional,user.GetUserResponse" json:"success,omitempty"`
	Err     *common.Error         `thrift:"err,1,optional" frugal:"1,optional,common.Error" json:"err,omitempty"`
}

func NewUserServiceGetUserResult() *UserServiceGetUserResult {
	return &UserServiceGetUserResult{}
}

func (p *UserServiceGetUserResult) InitDefault() {
}

var UserServiceGetUserResult_Success_DEFAULT *user.GetUserResponse

func (p *UserServiceGetUserResult) GetSuccess() (v *user.GetUserResponse) {
	if !p.IsSetSuccess() {
		return UserServiceGetUserResult_Success_DEFAULT
	}
	return p.Success
}

var UserServiceGetUserResult_Err_DEFAULT *common.Error

func (p *UserServiceGetUserResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return UserServiceGetUserResult_Err_DEFAULT
	}
	return p.Err
}
func (p *UserServiceGetUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.GetUserResponse)
}
func (p *UserServiceGetUserResult) SetErr(val *common.Error) {
	p.Err = val
}

func (p *UserServiceGetUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserServiceGetUserResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *UserServiceGetUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserServiceGetUserResult(%+v)", *p)
}

var fieldIDToName_UserServiceGetUserResult = map[int16]string{
	0: "success",
	1: "err",
}

// exceptions of methods in UserService.
var (
	_ error = (*common.Error)(nil)
)
