// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package property

import (
	"fmt"
)

const (
	PropertyTypeText = "text"

	PropertyTypeMarkdown = "markdown"

	PropertyTypeUser = "user"

	PropertyTypeList = "list"

	LocaleZhCN = "zh-CN"

	LocaleEnUS = "en-US"
)

type PropertyType = string

type Locale = string

type Property struct {
	Name        string         `thrift:"Name,1,required" frugal:"1,required,string" json:"Name"`
	DisplayName *I18nString    `thrift:"DisplayName,5,optional" frugal:"5,optional,I18nString" json:"DisplayName,omitempty"`
	Type        PropertyType   `thrift:"Type,2,required" frugal:"2,required,string" json:"Type"`
	ItemType    *PropertyType  `thrift:"ItemType,3,optional" frugal:"3,optional,string" json:"ItemType,omitempty"`
	Value       *PropertyValue `thrift:"Value,4,required" frugal:"4,required,PropertyValue" json:"Value"`
	RawValue    *string        `thrift:"RawValue,6,optional" frugal:"6,optional,string" json:"RawValue,omitempty"`
}

func NewProperty() *Property {
	return &Property{}
}

func (p *Property) InitDefault() {
}

func (p *Property) GetName() (v string) {
	return p.Name
}

var Property_DisplayName_DEFAULT *I18nString

func (p *Property) GetDisplayName() (v *I18nString) {
	if !p.IsSetDisplayName() {
		return Property_DisplayName_DEFAULT
	}
	return p.DisplayName
}

func (p *Property) GetType() (v PropertyType) {
	return p.Type
}

var Property_ItemType_DEFAULT PropertyType

func (p *Property) GetItemType() (v PropertyType) {
	if !p.IsSetItemType() {
		return Property_ItemType_DEFAULT
	}
	return *p.ItemType
}

var Property_Value_DEFAULT *PropertyValue

func (p *Property) GetValue() (v *PropertyValue) {
	if !p.IsSetValue() {
		return Property_Value_DEFAULT
	}
	return p.Value
}

var Property_RawValue_DEFAULT string

func (p *Property) GetRawValue() (v string) {
	if !p.IsSetRawValue() {
		return Property_RawValue_DEFAULT
	}
	return *p.RawValue
}
func (p *Property) SetName(val string) {
	p.Name = val
}
func (p *Property) SetDisplayName(val *I18nString) {
	p.DisplayName = val
}
func (p *Property) SetType(val PropertyType) {
	p.Type = val
}
func (p *Property) SetItemType(val *PropertyType) {
	p.ItemType = val
}
func (p *Property) SetValue(val *PropertyValue) {
	p.Value = val
}
func (p *Property) SetRawValue(val *string) {
	p.RawValue = val
}

func (p *Property) IsSetDisplayName() bool {
	return p.DisplayName != nil
}

func (p *Property) IsSetItemType() bool {
	return p.ItemType != nil
}

func (p *Property) IsSetValue() bool {
	return p.Value != nil
}

func (p *Property) IsSetRawValue() bool {
	return p.RawValue != nil
}

func (p *Property) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Property(%+v)", *p)
}

var fieldIDToName_Property = map[int16]string{
	1: "Name",
	5: "DisplayName",
	2: "Type",
	3: "ItemType",
	4: "Value",
	6: "RawValue",
}

type User struct {
	Id          string      `thrift:"Id,1,required" frugal:"1,required,string" json:"Id"`
	Username    string      `thrift:"Username,2,required" frugal:"2,required,string" json:"Username"`
	Name        string      `thrift:"Name,3,required" frugal:"3,required,string" json:"Name"`
	DisplayName *I18nString `thrift:"DisplayName,5,optional" frugal:"5,optional,I18nString" json:"DisplayName,omitempty"`
	AvatarURL   *string     `thrift:"AvatarURL,4,optional" frugal:"4,optional,string" json:"AvatarURL,omitempty"`
}

func NewUser() *User {
	return &User{}
}

func (p *User) InitDefault() {
}

func (p *User) GetId() (v string) {
	return p.Id
}

func (p *User) GetUsername() (v string) {
	return p.Username
}

func (p *User) GetName() (v string) {
	return p.Name
}

var User_DisplayName_DEFAULT *I18nString

func (p *User) GetDisplayName() (v *I18nString) {
	if !p.IsSetDisplayName() {
		return User_DisplayName_DEFAULT
	}
	return p.DisplayName
}

var User_AvatarURL_DEFAULT string

func (p *User) GetAvatarURL() (v string) {
	if !p.IsSetAvatarURL() {
		return User_AvatarURL_DEFAULT
	}
	return *p.AvatarURL
}
func (p *User) SetId(val string) {
	p.Id = val
}
func (p *User) SetUsername(val string) {
	p.Username = val
}
func (p *User) SetName(val string) {
	p.Name = val
}
func (p *User) SetDisplayName(val *I18nString) {
	p.DisplayName = val
}
func (p *User) SetAvatarURL(val *string) {
	p.AvatarURL = val
}

func (p *User) IsSetDisplayName() bool {
	return p.DisplayName != nil
}

func (p *User) IsSetAvatarURL() bool {
	return p.AvatarURL != nil
}

func (p *User) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("User(%+v)", *p)
}

var fieldIDToName_User = map[int16]string{
	1: "Id",
	2: "Username",
	3: "Name",
	5: "DisplayName",
	4: "AvatarURL",
}

type I18nString struct {
	Content string            `thrift:"Content,1,required" frugal:"1,required,string" json:"Content"`
	I18n    map[Locale]string `thrift:"I18n,2,optional" frugal:"2,optional,map<string:string>" json:"I18n,omitempty"`
}

func NewI18nString() *I18nString {
	return &I18nString{}
}

func (p *I18nString) InitDefault() {
}

func (p *I18nString) GetContent() (v string) {
	return p.Content
}

var I18nString_I18n_DEFAULT map[Locale]string

func (p *I18nString) GetI18n() (v map[Locale]string) {
	if !p.IsSetI18n() {
		return I18nString_I18n_DEFAULT
	}
	return p.I18n
}
func (p *I18nString) SetContent(val string) {
	p.Content = val
}
func (p *I18nString) SetI18n(val map[Locale]string) {
	p.I18n = val
}

func (p *I18nString) IsSetI18n() bool {
	return p.I18n != nil
}

func (p *I18nString) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("I18nString(%+v)", *p)
}

var fieldIDToName_I18nString = map[int16]string{
	1: "Content",
	2: "I18n",
}

type PropertyValue struct {
	Text     *I18nString      `thrift:"Text,1,optional" frugal:"1,optional,I18nString" json:"Text,omitempty"`
	Markdown *I18nString      `thrift:"Markdown,2,optional" frugal:"2,optional,I18nString" json:"Markdown,omitempty"`
	User     *User            `thrift:"User,3,optional" frugal:"3,optional,User" json:"User,omitempty"`
	List     []*PropertyValue `thrift:"List,4,optional" frugal:"4,optional,list<PropertyValue>" json:"List,omitempty"`
}

func NewPropertyValue() *PropertyValue {
	return &PropertyValue{}
}

func (p *PropertyValue) InitDefault() {
}

var PropertyValue_Text_DEFAULT *I18nString

func (p *PropertyValue) GetText() (v *I18nString) {
	if !p.IsSetText() {
		return PropertyValue_Text_DEFAULT
	}
	return p.Text
}

var PropertyValue_Markdown_DEFAULT *I18nString

func (p *PropertyValue) GetMarkdown() (v *I18nString) {
	if !p.IsSetMarkdown() {
		return PropertyValue_Markdown_DEFAULT
	}
	return p.Markdown
}

var PropertyValue_User_DEFAULT *User

func (p *PropertyValue) GetUser() (v *User) {
	if !p.IsSetUser() {
		return PropertyValue_User_DEFAULT
	}
	return p.User
}

var PropertyValue_List_DEFAULT []*PropertyValue

func (p *PropertyValue) GetList() (v []*PropertyValue) {
	if !p.IsSetList() {
		return PropertyValue_List_DEFAULT
	}
	return p.List
}
func (p *PropertyValue) SetText(val *I18nString) {
	p.Text = val
}
func (p *PropertyValue) SetMarkdown(val *I18nString) {
	p.Markdown = val
}
func (p *PropertyValue) SetUser(val *User) {
	p.User = val
}
func (p *PropertyValue) SetList(val []*PropertyValue) {
	p.List = val
}

func (p *PropertyValue) CountSetFieldsPropertyValue() int {
	count := 0
	if p.IsSetText() {
		count++
	}
	if p.IsSetMarkdown() {
		count++
	}
	if p.IsSetUser() {
		count++
	}
	if p.IsSetList() {
		count++
	}
	return count
}

func (p *PropertyValue) IsSetText() bool {
	return p.Text != nil
}

func (p *PropertyValue) IsSetMarkdown() bool {
	return p.Markdown != nil
}

func (p *PropertyValue) IsSetUser() bool {
	return p.User != nil
}

func (p *PropertyValue) IsSetList() bool {
	return p.List != nil
}

func (p *PropertyValue) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PropertyValue(%+v)", *p)
}

var fieldIDToName_PropertyValue = map[int16]string{
	1: "Text",
	2: "Markdown",
	3: "User",
	4: "List",
}
