// Code generated by errors generator. DO NOT EDIT.

package oa_errors

import (
	"fmt"
)

type missingParameter_parameter struct {
	errorBase
}

// MissingParameter_parameter returns a new error explained as follows
/* 用于表达参数缺失错误，例如未传入必填参数。
示例：MissingParameter.RoleName
MissingParameter.User.UserName */
func MissingParameter_parameter(parameter string) *missingParameter_parameter {
	return &missingParameter_parameter{
		errorBase: errorBase{
			httpCode: 400,
			code:     fmt.Sprintf("MissingParameter.%s", parameter),
			message:  fmt.Sprintf("The required parameter %s is missing.", parameter),
			dataPreset: map[string]string{
				"__Message.parameter": parameter,
			},
		},
	}
}
func (e *missingParameter_parameter) AppendSubCode(code string) *missingParameter_parameter {
	e.code = e.code + "." + code
	return e
}

func (e *missingParameter_parameter) SetMessage(message string) *missingParameter_parameter {
	e.errorBase.message = message
	e.errorBase.dataPreset = nil
	return e
}

func (e *missingParameter_parameter) SetData(data map[string]string) *missingParameter_parameter {
	e.errorBase.data = data
	return e
}

type invalidParameter_parameter struct {
	errorBase
}

// InvalidParameter_parameter returns a new error explained as follows
/* 用于表达必要的参数的不合法性，包括参数类型错误、长度不合法、枚举值不合法、不满足正则规则等。
示例：InvalidParameter.PolicyName
InvalidParameter.Tags.1.Key */
func InvalidParameter_parameter(parameter string) *invalidParameter_parameter {
	return &invalidParameter_parameter{
		errorBase: errorBase{
			httpCode: 400,
			code:     fmt.Sprintf("InvalidParameter.%s", parameter),
			message:  fmt.Sprintf("The specified parameter %s is invalid.", parameter),
			dataPreset: map[string]string{
				"__Message.parameter": parameter,
			},
		},
	}
}
func (e *invalidParameter_parameter) AppendSubCode(code string) *invalidParameter_parameter {
	e.code = e.code + "." + code
	return e
}

func (e *invalidParameter_parameter) SetMessage(message string) *invalidParameter_parameter {
	e.errorBase.message = message
	e.errorBase.dataPreset = nil
	return e
}

func (e *invalidParameter_parameter) SetData(data map[string]string) *invalidParameter_parameter {
	e.errorBase.data = data
	return e
}

type operationDenied_cause struct {
	errorBase
}

// OperationDenied_cause returns a new error explained as follows
/* 表示操作被拒绝，强调当前环境下对操作对象执行的操作不合理，这种情况一般推荐用户停止操作或解决依赖问题后再尝试操作。
示例：OperationDenied.ClusterInUse
 Operation is denied because the specified resource is in use. */
func OperationDenied_cause(causeDescription, cause string) *operationDenied_cause {
	return &operationDenied_cause{
		errorBase: errorBase{
			httpCode: 403,
			code:     fmt.Sprintf("OperationDenied.%s", cause),
			message:  fmt.Sprintf("Operation is denied because %s.", causeDescription),
			dataPreset: map[string]string{
				"__Message.causeDescription": causeDescription,
				"__Message.cause":            cause,
			},
		},
	}
}
func (e *operationDenied_cause) AppendSubCode(code string) *operationDenied_cause {
	e.code = e.code + "." + code
	return e
}

func (e *operationDenied_cause) SetMessage(message string) *operationDenied_cause {
	e.errorBase.message = message
	e.errorBase.dataPreset = nil
	return e
}

func (e *operationDenied_cause) SetData(data map[string]string) *operationDenied_cause {
	e.errorBase.data = data
	return e
}

type quotaExceeded_element struct {
	errorBase
}

// QuotaExceeded_element returns a new error explained as follows
/* 表示已超过资源限额，包括无法提升的服务自身限制以及为用户分配的资源限额。
示例：QuotaExceeded.DiskMemory
 The memory size of the specified disk has exceeded the quota. */
func QuotaExceeded_element(elementDescription, element string) *quotaExceeded_element {
	return &quotaExceeded_element{
		errorBase: errorBase{
			httpCode: 400,
			code:     fmt.Sprintf("QuotaExceeded.%s", element),
			message:  fmt.Sprintf("%s has exceeded the quota.", elementDescription),
			dataPreset: map[string]string{
				"__Message.elementDescription": elementDescription,
				"__Message.element":            element,
			},
		},
	}
}
func (e *quotaExceeded_element) AppendSubCode(code string) *quotaExceeded_element {
	e.code = e.code + "." + code
	return e
}

func (e *quotaExceeded_element) SetMessage(message string) *quotaExceeded_element {
	e.errorBase.message = message
	e.errorBase.dataPreset = nil
	return e
}

func (e *quotaExceeded_element) SetData(data map[string]string) *quotaExceeded_element {
	e.errorBase.data = data
	return e
}

type idempotentParameterMismatch struct {
	errorBase
}

// IdempotentParameterMismatch returns a new error explained as follows
/* 用于表达使用了ClientToken的请求，其他请求参数出现了变化，导致请求不生效。 */
func IdempotentParameterMismatch() *idempotentParameterMismatch {
	return &idempotentParameterMismatch{
		errorBase: errorBase{
			httpCode:   400,
			code:       fmt.Sprintf("IdempotentParameterMismatch"),
			message:    fmt.Sprintf("Parameters mismatch the previous request with a same ClientToken."),
			dataPreset: map[string]string{},
		},
	}
}
func (e *idempotentParameterMismatch) AppendSubCode(code string) *idempotentParameterMismatch {
	e.code = e.code + "." + code
	return e
}

func (e *idempotentParameterMismatch) SetMessage(message string) *idempotentParameterMismatch {
	e.errorBase.message = message
	e.errorBase.dataPreset = nil
	return e
}

func (e *idempotentParameterMismatch) SetData(data map[string]string) *idempotentParameterMismatch {
	e.errorBase.data = data
	return e
}

type dryRunOperation struct {
	errorBase
}

// DryRunOperation returns a new error explained as follows
/* 表示DryRun请求通过了全部检查，空运行成功。 */
func DryRunOperation() *dryRunOperation {
	return &dryRunOperation{
		errorBase: errorBase{
			httpCode:   400,
			code:       fmt.Sprintf("DryRunOperation"),
			message:    fmt.Sprintf("The request is validated by a dryrun operation."),
			dataPreset: map[string]string{},
		},
	}
}
func (e *dryRunOperation) AppendSubCode(code string) *dryRunOperation {
	e.code = e.code + "." + code
	return e
}

func (e *dryRunOperation) SetMessage(message string) *dryRunOperation {
	e.errorBase.message = message
	e.errorBase.dataPreset = nil
	return e
}

func (e *dryRunOperation) SetData(data map[string]string) *dryRunOperation {
	e.errorBase.data = data
	return e
}

type internalError struct {
	errorBase
}

// InternalError returns a new error explained as follows
/* 请求处理过程中出现了未知错误，例如后端服务超时、出现网络波动等，与可靠性相关。 */
func InternalError() *internalError {
	return &internalError{
		errorBase: errorBase{
			httpCode:   500,
			code:       fmt.Sprintf("InternalError"),
			message:    fmt.Sprintf("The request has failed due to an unknown error."),
			dataPreset: map[string]string{},
		},
	}
}
func (e *internalError) AppendSubCode(code string) *internalError {
	e.code = e.code + "." + code
	return e
}

func (e *internalError) SetMessage(message string) *internalError {
	e.errorBase.message = message
	e.errorBase.dataPreset = nil
	return e
}

func (e *internalError) SetData(data map[string]string) *internalError {
	e.errorBase.data = data
	return e
}

type serviceUnavailable struct {
	errorBase
}

// ServiceUnavailable returns a new error explained as follows
/* 服务出现故障或无法提供服务，例如进入了故障期/修复期、发生了熔断等，与可用性相关。 */
func ServiceUnavailable() *serviceUnavailable {
	return &serviceUnavailable{
		errorBase: errorBase{
			httpCode:   503,
			code:       fmt.Sprintf("ServiceUnavailable"),
			message:    fmt.Sprintf("The request has failed due to a temporary failure of the server."),
			dataPreset: map[string]string{},
		},
	}
}
func (e *serviceUnavailable) AppendSubCode(code string) *serviceUnavailable {
	e.code = e.code + "." + code
	return e
}

func (e *serviceUnavailable) SetMessage(message string) *serviceUnavailable {
	e.errorBase.message = message
	e.errorBase.dataPreset = nil
	return e
}

func (e *serviceUnavailable) SetData(data map[string]string) *serviceUnavailable {
	e.errorBase.data = data
	return e
}

type missingAction struct {
	errorBase
}

// MissingAction returns a new error explained as follows
/* 请求缺少Action。 */
func MissingAction() *missingAction {
	return &missingAction{
		errorBase: errorBase{
			httpCode:   400,
			code:       fmt.Sprintf("MissingAction"),
			message:    fmt.Sprintf("The request is missing an action."),
			dataPreset: map[string]string{},
		},
	}
}
func (e *missingAction) AppendSubCode(code string) *missingAction {
	e.code = e.code + "." + code
	return e
}

func (e *missingAction) SetMessage(message string) *missingAction {
	e.errorBase.message = message
	e.errorBase.dataPreset = nil
	return e
}

func (e *missingAction) SetData(data map[string]string) *missingAction {
	e.errorBase.data = data
	return e
}

type invalidAction struct {
	errorBase
}

// InvalidAction returns a new error explained as follows
/* 不合法的Action。 */
func InvalidAction() *invalidAction {
	return &invalidAction{
		errorBase: errorBase{
			httpCode:   400,
			code:       fmt.Sprintf("InvalidAction"),
			message:    fmt.Sprintf("The specified action is invalid."),
			dataPreset: map[string]string{},
		},
	}
}
func (e *invalidAction) AppendSubCode(code string) *invalidAction {
	e.code = e.code + "." + code
	return e
}

func (e *invalidAction) SetMessage(message string) *invalidAction {
	e.errorBase.message = message
	e.errorBase.dataPreset = nil
	return e
}

func (e *invalidAction) SetData(data map[string]string) *invalidAction {
	e.errorBase.data = data
	return e
}

type accessDenied struct {
	errorBase
}

// AccessDenied returns a new error explained as follows
/* 请求未通过IAM权限验证。 */
func AccessDenied() *accessDenied {
	return &accessDenied{
		errorBase: errorBase{
			httpCode:   403,
			code:       fmt.Sprintf("AccessDenied"),
			message:    fmt.Sprintf("You are not authorized to perform this action."),
			dataPreset: map[string]string{},
		},
	}
}
func (e *accessDenied) AppendSubCode(code string) *accessDenied {
	e.code = e.code + "." + code
	return e
}

func (e *accessDenied) SetMessage(message string) *accessDenied {
	e.errorBase.message = message
	e.errorBase.dataPreset = nil
	return e
}

func (e *accessDenied) SetData(data map[string]string) *accessDenied {
	e.errorBase.data = data
	return e
}

type throttling struct {
	errorBase
}

// Throttling returns a new error explained as follows
/* 请求收到流控限制。 */
func Throttling() *throttling {
	return &throttling{
		errorBase: errorBase{
			httpCode:   400,
			code:       fmt.Sprintf("Throttling"),
			message:    fmt.Sprintf("The request is denied due to request throttling."),
			dataPreset: map[string]string{},
		},
	}
}
func (e *throttling) AppendSubCode(code string) *throttling {
	e.code = e.code + "." + code
	return e
}

func (e *throttling) SetMessage(message string) *throttling {
	e.errorBase.message = message
	e.errorBase.dataPreset = nil
	return e
}

func (e *throttling) SetData(data map[string]string) *throttling {
	e.errorBase.data = data
	return e
}

type invalidAccessKeyId struct {
	errorBase
}

// InvalidAccessKeyId returns a new error explained as follows
/* 不合法的Access Key Id。 */
func InvalidAccessKeyId() *invalidAccessKeyId {
	return &invalidAccessKeyId{
		errorBase: errorBase{
			httpCode:   403,
			code:       fmt.Sprintf("InvalidAccessKeyId"),
			message:    fmt.Sprintf("The access key ID provided is not valid."),
			dataPreset: map[string]string{},
		},
	}
}
func (e *invalidAccessKeyId) AppendSubCode(code string) *invalidAccessKeyId {
	e.code = e.code + "." + code
	return e
}

func (e *invalidAccessKeyId) SetMessage(message string) *invalidAccessKeyId {
	e.errorBase.message = message
	e.errorBase.dataPreset = nil
	return e
}

func (e *invalidAccessKeyId) SetData(data map[string]string) *invalidAccessKeyId {
	e.errorBase.data = data
	return e
}

type signatureNotMatch struct {
	errorBase
}

// SignatureNotMatch returns a new error explained as follows
/* 签名缺失或错误。 */
func SignatureNotMatch() *signatureNotMatch {
	return &signatureNotMatch{
		errorBase: errorBase{
			httpCode:   401,
			code:       fmt.Sprintf("SignatureNotMatch"),
			message:    fmt.Sprintf("The request signature provided is incorrect."),
			dataPreset: map[string]string{},
		},
	}
}
func (e *signatureNotMatch) AppendSubCode(code string) *signatureNotMatch {
	e.code = e.code + "." + code
	return e
}

func (e *signatureNotMatch) SetMessage(message string) *signatureNotMatch {
	e.errorBase.message = message
	e.errorBase.dataPreset = nil
	return e
}

func (e *signatureNotMatch) SetData(data map[string]string) *signatureNotMatch {
	e.errorBase.data = data
	return e
}
