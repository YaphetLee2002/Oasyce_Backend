// Code generated by errors generator. DO NOT EDIT.

package oa_errors

import (
	"fmt"
)

type notFound_parameter struct {
	errorBase
}

// NotFound_parameter returns a new error explained as follows
/* 指定的资源找不到 */
func NotFound_parameter(resourceType, resourceContent, parameter string) *notFound_parameter {
	return &notFound_parameter{
		errorBase: errorBase{
			httpCode: 404,
			code:     fmt.Sprintf("NotFound.%s", parameter),
			message:  fmt.Sprintf("The specified %s %s is not found.", resourceType, resourceContent),
			dataPreset: map[string]string{
				"__Message.resourceType":    resourceType,
				"__Message.resourceContent": resourceContent,
				"__Message.parameter":       parameter,
			},
		},
	}
}
func (e *notFound_parameter) AppendSubCode(code string) *notFound_parameter {
	e.code = e.code + "." + code
	return e
}

func (e *notFound_parameter) SetMessage(message string) *notFound_parameter {
	e.errorBase.message = message
	e.errorBase.dataPreset = nil
	return e
}

func (e *notFound_parameter) SetData(data map[string]string) *notFound_parameter {
	e.errorBase.data = data
	return e
}

type conflict_Name struct {
	errorBase
}

// Conflict_Name returns a new error explained as follows
/* 指定的名称与已有资源重复 */
func Conflict_Name(resourceType string) *conflict_Name {
	return &conflict_Name{
		errorBase: errorBase{
			httpCode: 409,
			code:     fmt.Sprintf("Conflict.Name"),
			message:  fmt.Sprintf("The specified name conflicts with existing %s.", resourceType),
			dataPreset: map[string]string{
				"__Message.resourceType": resourceType,
			},
		},
	}
}
func (e *conflict_Name) AppendSubCode(code string) *conflict_Name {
	e.code = e.code + "." + code
	return e
}

func (e *conflict_Name) SetMessage(message string) *conflict_Name {
	e.errorBase.message = message
	e.errorBase.dataPreset = nil
	return e
}

func (e *conflict_Name) SetData(data map[string]string) *conflict_Name {
	e.errorBase.data = data
	return e
}

type alreadyExists_parameter struct {
	errorBase
}

// AlreadyExists_parameter returns a new error explained as follows
/* 指定的资源已存在 */
func AlreadyExists_parameter(resourceType, resourceId, parameter string) *alreadyExists_parameter {
	return &alreadyExists_parameter{
		errorBase: errorBase{
			httpCode: 409,
			code:     fmt.Sprintf("AlreadyExists.%s", parameter),
			message:  fmt.Sprintf("The specified %s %s has already been included.", resourceType, resourceId),
			dataPreset: map[string]string{
				"__Message.resourceType": resourceType,
				"__Message.resourceId":   resourceId,
				"__Message.parameter":    parameter,
			},
		},
	}
}
func (e *alreadyExists_parameter) AppendSubCode(code string) *alreadyExists_parameter {
	e.code = e.code + "." + code
	return e
}

func (e *alreadyExists_parameter) SetMessage(message string) *alreadyExists_parameter {
	e.errorBase.message = message
	e.errorBase.dataPreset = nil
	return e
}

func (e *alreadyExists_parameter) SetData(data map[string]string) *alreadyExists_parameter {
	e.errorBase.data = data
	return e
}

type operationDenied_UserNotInAllowList struct {
	errorBase
}

// OperationDenied_UserNotInAllowList returns a new error explained as follows
/* 需要开通具体功能的白名单 */
func OperationDenied_UserNotInAllowList(featureName string) *operationDenied_UserNotInAllowList {
	return &operationDenied_UserNotInAllowList{
		errorBase: errorBase{
			httpCode: 400,
			code:     fmt.Sprintf("OperationDenied.UserNotInAllowList"),
			message:  fmt.Sprintf("The feature %s is not in the allow list.", featureName),
			dataPreset: map[string]string{
				"__Message.featureName": featureName,
			},
		},
	}
}
func (e *operationDenied_UserNotInAllowList) AppendSubCode(code string) *operationDenied_UserNotInAllowList {
	e.code = e.code + "." + code
	return e
}

func (e *operationDenied_UserNotInAllowList) SetMessage(message string) *operationDenied_UserNotInAllowList {
	e.errorBase.message = message
	e.errorBase.dataPreset = nil
	return e
}

func (e *operationDenied_UserNotInAllowList) SetData(data map[string]string) *operationDenied_UserNotInAllowList {
	e.errorBase.data = data
	return e
}

type insufficient_Balance struct {
	errorBase
}

// Insufficient_Balance returns a new error explained as follows
/* 欠费 */
func Insufficient_Balance() *insufficient_Balance {
	return &insufficient_Balance{
		errorBase: errorBase{
			httpCode:   400,
			code:       fmt.Sprintf("Insufficient.Balance"),
			message:    fmt.Sprintf("Your account has run out of balance."),
			dataPreset: map[string]string{},
		},
	}
}
func (e *insufficient_Balance) AppendSubCode(code string) *insufficient_Balance {
	e.code = e.code + "." + code
	return e
}

func (e *insufficient_Balance) SetMessage(message string) *insufficient_Balance {
	e.errorBase.message = message
	e.errorBase.dataPreset = nil
	return e
}

func (e *insufficient_Balance) SetData(data map[string]string) *insufficient_Balance {
	e.errorBase.data = data
	return e
}

type invalidParameter_BodyFormat struct {
	errorBase
}

// InvalidParameter_BodyFormat returns a new error explained as follows
/* 表达请求中，body 的格式不合法 */
func InvalidParameter_BodyFormat() *invalidParameter_BodyFormat {
	return &invalidParameter_BodyFormat{
		errorBase: errorBase{
			httpCode:   400,
			code:       fmt.Sprintf("InvalidParameter.BodyFormat"),
			message:    fmt.Sprintf("The format of parameter in body is invalid."),
			dataPreset: map[string]string{},
		},
	}
}
func (e *invalidParameter_BodyFormat) AppendSubCode(code string) *invalidParameter_BodyFormat {
	e.code = e.code + "." + code
	return e
}

func (e *invalidParameter_BodyFormat) SetMessage(message string) *invalidParameter_BodyFormat {
	e.errorBase.message = message
	e.errorBase.dataPreset = nil
	return e
}

func (e *invalidParameter_BodyFormat) SetData(data map[string]string) *invalidParameter_BodyFormat {
	e.errorBase.data = data
	return e
}
